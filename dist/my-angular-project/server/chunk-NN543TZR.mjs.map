{
  "version": 3,
  "sources": ["src/app/components/auth/auth-modal.component.ts", "src/app/components/auth/auth-modal.component.html", "src/app/components/header/header.component.ts", "src/app/components/header/header.component.html", "src/app/components/dog-assistant/dog-assistant.component.ts", "src/app/components/dog-assistant/dog-assistant.component.html", "src/app/app.component.ts", "src/app/app.component.html", "src/app/components/dog-breeds/dog-breeds.component.ts", "src/app/components/dog-breeds/dog-breeds.component.html", "src/app/components/latest-posts/latest-posts.component.ts", "src/app/components/latest-posts/latest-posts.component.html", "src/app/components/home/home.component.ts", "src/app/components/home/home.component.html", "src/app/components/category-page/category-page.component.ts", "src/app/components/search-page/search-page.component.ts", "src/app/components/hashtag-page/hashtag-page.component.ts", "src/app/components/hashtag-page/hashtag-page.component.html", "src/app/services/comments.service.ts", "src/app/components/post-detail/post-detail.component.ts", "src/app/components/post-detail/post-detail.component.html", "src/app/components/community/community.component.ts", "src/app/components/community/community.component.html", "src/app/components/admin/admin.component.ts", "src/app/components/admin/admin.component.html", "src/app/components/breed-detail/breed-detail.component.ts", "src/app/components/breed-detail/breed-detail.component.html", "src/app/components/all-breeds/all-breeds.component.ts", "src/app/components/all-breeds/all-breeds.component.html", "src/app/app.routes.ts", "src/app/app.config.ts", "src/app/app.config.server.ts", "src/main.server.ts"],
  "sourcesContent": ["\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { LoginRequest, RegisterRequest } from '../../models/user.model';\n\n@Component({\n  selector: 'app-auth-modal',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './auth-modal.component.html',\n  styleUrls: ['./auth-modal.component.css']\n})\nexport class AuthModalComponent {\n  @Input() isOpen = false;\n  @Output() close = new EventEmitter<void>();\n\n  isLoginMode = true;\n  \n  loginData: LoginRequest = {\n    email: '',\n    password: ''\n  };\n\n  registerData: RegisterRequest = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n\n  constructor(private authService: AuthService) {}\n\n  closeModal() {\n    this.close.emit();\n  }\n\n  toggleMode() {\n    this.isLoginMode = !this.isLoginMode;\n  }\n\n  onLogin() {\n    this.authService.login(this.loginData).subscribe({\n      next: (response) => {\n        console.log('Login successful', response);\n        this.closeModal();\n      },\n      error: (error) => {\n        console.error('Login failed', error);\n        alert('Login failed. Please check your credentials.');\n      }\n    });\n  }\n\n  onRegister() {\n    if (this.registerData.password !== this.registerData.confirmPassword) {\n      alert('Passwords do not match');\n      return;\n    }\n\n    this.authService.register(this.registerData).subscribe({\n      next: (response) => {\n        console.log('Registration successful', response);\n        this.closeModal();\n      },\n      error: (error) => {\n        console.error('Registration failed', error);\n        alert('Registration failed. Please try again.');\n      }\n    });\n  }\n}\n", "\n<div class=\"modal-overlay\" *ngIf=\"isOpen\" (click)=\"closeModal()\">\n  <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\n    <div class=\"modal-header\">\n      <h2>{{ isLoginMode ? 'Login' : 'Register' }}</h2>\n      <button class=\"close-btn\" (click)=\"closeModal()\">√ó</button>\n    </div>\n    \n    <div class=\"modal-body\">\n      <!-- Login Form -->\n      <form *ngIf=\"isLoginMode\" (ngSubmit)=\"onLogin()\" #loginForm=\"ngForm\">\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input \n            type=\"email\" \n            id=\"email\"\n            name=\"email\"\n            [(ngModel)]=\"loginData.email\"\n            required\n            class=\"form-control\"\n          >\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"password\">Password</label>\n          <input \n            type=\"password\" \n            id=\"password\"\n            name=\"password\"\n            [(ngModel)]=\"loginData.password\"\n            required\n            class=\"form-control\"\n          >\n        </div>\n        \n        <button type=\"submit\" class=\"btn-primary\" [disabled]=\"!loginForm.valid\">\n          Login\n        </button>\n      </form>\n\n      <!-- Register Form -->\n      <form *ngIf=\"!isLoginMode\" (ngSubmit)=\"onRegister()\" #registerForm=\"ngForm\">\n        <div class=\"form-group\">\n          <label for=\"username\">Username</label>\n          <input \n            type=\"text\" \n            id=\"username\"\n            name=\"username\"\n            [(ngModel)]=\"registerData.username\"\n            required\n            class=\"form-control\"\n          >\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"reg-email\">Email</label>\n          <input \n            type=\"email\" \n            id=\"reg-email\"\n            name=\"email\"\n            [(ngModel)]=\"registerData.email\"\n            required\n            class=\"form-control\"\n          >\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"reg-password\">Password</label>\n          <input \n            type=\"password\" \n            id=\"reg-password\"\n            name=\"password\"\n            [(ngModel)]=\"registerData.password\"\n            required\n            minlength=\"6\"\n            class=\"form-control\"\n          >\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"confirm-password\">Confirm Password</label>\n          <input \n            type=\"password\" \n            id=\"confirm-password\"\n            name=\"confirmPassword\"\n            [(ngModel)]=\"registerData.confirmPassword\"\n            required\n            class=\"form-control\"\n          >\n        </div>\n        \n        <button type=\"submit\" class=\"btn-primary\" [disabled]=\"!registerForm.valid || registerData.password !== registerData.confirmPassword\">\n          Register\n        </button>\n      </form>\n      \n      <div class=\"form-footer\">\n        <button class=\"link-btn\" (click)=\"toggleMode()\">\n          {{ isLoginMode ? 'Need an account? Register' : 'Already have an account? Login' }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n", "import { Component, Output, EventEmitter, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { DogCategory } from '../../models/dog.model';\nimport { AuthService } from '../../services/auth.service';\nimport { AuthModalComponent } from '../auth/auth-modal.component';\nimport { User } from '../../models/user.model';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterLink, RouterLinkActive, AuthModalComponent],\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  @Output() searchChange = new EventEmitter<string>();\n  @Output() categoryChange = new EventEmitter<DogCategory | null>();\n\n  searchQuery = '';\n  selectedCategory: DogCategory | null = null;\n  isMobileMenuOpen = false;\n  isAuthModalOpen = false;\n  currentUser: User | null = null;\n  mobileMenuOpen: boolean = false;\n\n  categories = [\n    { label: 'All', value: null },\n    { label: 'Breeds', value: DogCategory.BREEDS },\n    { label: 'Food', value: DogCategory.FOOD },\n    { label: 'Environment', value: DogCategory.ENVIRONMENT },\n    { label: 'Training', value: DogCategory.TRAINING },\n    { label: 'Health', value: DogCategory.HEALTH },\n    { label: 'Grooming', value: DogCategory.GROOMING }\n  ];\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  ngOnInit() {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n\n  onSearch() {\n    this.searchChange.emit(this.searchQuery);\n  }\n\n  onCategorySelect(category: DogCategory | null) {\n    this.selectedCategory = category;\n    this.categoryChange.emit(category);\n    this.closeMobileMenu();\n  }\n\n  toggleMobileMenu() {\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\n    this.mobileMenuOpen = !this.mobileMenuOpen;\n  }\n\n  closeMobileMenu() {\n    this.isMobileMenuOpen = false;\n    this.mobileMenuOpen = false;\n  }\n\n  openAuthModal(mode: 'login' | 'register') {\n    this.isAuthModalOpen = true;\n    this.closeMobileMenu();\n  }\n\n  closeAuthModal() {\n    this.isAuthModalOpen = false;\n  }\n\n  logout() {\n    this.authService.logout();\n    this.closeMobileMenu();\n  }\n\n    onSearchSubmit() {\n    if (this.searchQuery.trim()) {\n      this.router.navigate(['/search'], { queryParams: { q: this.searchQuery } });\n    }\n  }\n\n  showLoginModal() {\n    // Implement login modal\n    this.mobileMenuOpen = false;\n  }\n\n  showRegisterModal() {\n    // Implement register modal\n    this.mobileMenuOpen = false;\n  }\n}", "<header class=\"main-header\">\n  <div class=\"header-container\">\n    <!-- Logo -->\n    <div class=\"logo\">\n      <h1><a routerLink=\"/\">üêï DogBreeds Hub</a></h1>\n    </div>\n\n    <!-- Desktop Navigation -->\n    <nav class=\"desktop-nav\">\n      <div class=\"nav-links\">\n        <a routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">Home</a>\n        <a routerLink=\"/community\" routerLinkActive=\"active\">Community</a>\n        <div class=\"dropdown\">\n          <button class=\"dropdown-btn\">Categories</button>\n          <div class=\"dropdown-content\">\n            <a *ngFor=\"let category of categories\" \n               (click)=\"onCategorySelect(category.value)\"\n               [class.active]=\"selectedCategory === category.value\">\n              {{ category.label }}\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <!-- Search Bar -->\n      <div class=\"search-container\">\n        <form (ngSubmit)=\"onSearchSubmit()\" class=\"search-form\">\n          <input \n            type=\"text\" \n            [(ngModel)]=\"searchQuery\"\n            name=\"searchQuery\"\n            placeholder=\"Search breeds, posts...\"\n            class=\"search-input\">\n          <button type=\"submit\" class=\"search-btn\">üîç</button>\n        </form>\n      </div>\n\n      <!-- User Menu -->\n      <div class=\"user-menu\">\n        <div *ngIf=\"currentUser; else authButtons\" class=\"user-info\">\n          <div class=\"dropdown\">\n            <button class=\"user-btn\">\n              <img [src]=\"currentUser.avatar\" [alt]=\"currentUser.username\" class=\"user-avatar\">\n              {{ currentUser.username }}\n            </button>\n            <div class=\"dropdown-content\">\n              <a routerLink=\"/profile\">Profile</a>\n              <a routerLink=\"/admin\" *ngIf=\"currentUser.role === 'admin'\">Admin</a>\n              <button (click)=\"logout()\">Logout</button>\n            </div>\n          </div>\n        </div>\n        <ng-template #authButtons>\n          <button class=\"auth-btn login-btn\" (click)=\"openAuthModal('login')\">Login</button>\n          <button class=\"auth-btn register-btn\" (click)=\"openAuthModal('register')\">Register</button>\n        </ng-template>\n      </div>\n    </nav>\n\n    <div class=\"mobile-overlay\" [class.show]=\"mobileMenuOpen\" (click)=\"toggleMobileMenu()\"></div>\n\n    <!-- Mobile Menu Button -->\n    <button class=\"mobile-menu-btn\" (click)=\"toggleMobileMenu()\">\n      <span [class.active]=\"isMobileMenuOpen\"></span>\n      <span [class.active]=\"isMobileMenuOpen\"></span>\n      <span [class.active]=\"isMobileMenuOpen\"></span>\n    </button>\n  </div>\n\n  <!-- Mobile Navigation -->\n  <div class=\"mobile-nav\" [class.open]=\"isMobileMenuOpen\">\n    <div class=\"mobile-search\">\n      <form (ngSubmit)=\"onSearchSubmit()\" class=\"search-form\">\n        <input \n          type=\"text\" \n          [(ngModel)]=\"searchQuery\"\n          name=\"searchQuery\"\n          placeholder=\"Search...\"\n          class=\"search-input\">\n        <button type=\"submit\" class=\"search-btn\">üîç</button>\n      </form>\n    </div>\n\n    <div class=\"mobile-links\">\n      <a routerLink=\"/\" (click)=\"closeMobileMenu()\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">Home</a>\n      <a routerLink=\"/all-breeds\" (click)=\"closeMobileMenu()\">üêï All Breeds</a>\n      <a routerLink=\"/community\" (click)=\"closeMobileMenu()\" routerLinkActive=\"active\">Community</a>\n\n      <div class=\"mobile-categories\">\n        <h4>Categories</h4>\n        <a *ngFor=\"let category of categories\" \n           (click)=\"onCategorySelect(category.value)\"\n           [class.active]=\"selectedCategory === category.value\">\n          {{ category.label }}\n        </a>\n      </div>\n\n      <div class=\"mobile-auth\" *ngIf=\"!currentUser\">\n        <button class=\"auth-btn login-btn\" (click)=\"openAuthModal('login')\">Login</button>\n        <button class=\"auth-btn register-btn\" (click)=\"openAuthModal('register')\">Register</button>\n      </div>\n\n      <div class=\"mobile-user\" *ngIf=\"currentUser\">\n        <div class=\"user-info\">\n          <img [src]=\"currentUser.avatar\" [alt]=\"currentUser.username\" class=\"user-avatar\">\n          <span>{{ currentUser.username }}</span>\n        </div>\n        <a routerLink=\"/profile\" (click)=\"closeMobileMenu()\">Profile</a>\n        <a routerLink=\"/admin\" (click)=\"closeMobileMenu()\" *ngIf=\"currentUser.role === 'admin'\">Admin</a>\n        <button (click)=\"logout()\" class=\"logout-btn\">Logout</button>\n      </div>\n    </div>\n  </div>\n</header>\n\n<!-- Auth Modal -->\n<app-auth-modal \n  [isOpen]=\"isAuthModalOpen\"\n  (close)=\"closeAuthModal()\">\n</app-auth-modal>", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-dog-assistant',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './dog-assistant.component.html',\n  styleUrls: ['./dog-assistant.component.css']\n})\nexport class DogAssistantComponent implements OnInit {\n  position = { x: 100, y: 100 };\n  isActive = false;\n  showMessage = false;\n  currentMessage = '';\n\n  messages = [\n    \"Woof! Welcome to DogBreeds Hub! üêæ\",\n    \"Need help finding the perfect breed?\",\n    \"Don't forget to check out our latest posts!\",\n    \"Bark if you need assistance! üêï\",\n    \"Every dog deserves love and care! ‚ù§Ô∏è\",\n    \"Explore different categories to learn more!\"\n  ];\n\n  ngOnInit() {\n    // Only start movement and messages in browser environment\n    if (typeof window !== 'undefined') {\n      this.startMovement();\n      this.showRandomMessage();\n    }\n  }\n\n  startMovement() {\n    setInterval(() => {\n      this.moveRandomly();\n    }, 8000);\n  }\n\n  moveRandomly() {\n    // Check if running in browser environment\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const maxX = window.innerWidth - 80;\n    const maxY = window.innerHeight - 80;\n\n    this.position.x = Math.random() * Math.max(0, maxX);\n    this.position.y = Math.random() * Math.max(0, maxY);\n\n    this.isActive = true;\n    setTimeout(() => {\n      this.isActive = false;\n    }, 600);\n  }\n\n  showRandomMessage() {\n    // Only show messages in browser environment\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    setInterval(() => {\n      this.currentMessage = this.messages[Math.floor(Math.random() * this.messages.length)];\n      this.showMessage = true;\n\n      setTimeout(() => {\n        this.showMessage = false;\n      }, 4000);\n    }, 15000);\n  }\n}", "\n<div \n  class=\"dog-assistant\"\n  [class.active]=\"isActive\"\n  [style.left.px]=\"position.x\"\n  [style.top.px]=\"position.y\">\n  üêï\n</div>\n\n<div \n  class=\"dog-message\" \n  *ngIf=\"showMessage\"\n  [style.left.px]=\"position.x + 60\"\n  [style.top.px]=\"position.y - 10\">\n  {{ currentMessage }}\n</div>\n", "\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet, Router } from '@angular/router';\nimport { HeaderComponent } from './components/header/header.component';\nimport { DogAssistantComponent } from './components/dog-assistant/dog-assistant.component';\nimport { DogService } from './services/dog.service';\nimport { DogBreed, DogPost, DogCategory } from './models/dog.model';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterOutlet,\n    HeaderComponent,\n    DogAssistantComponent\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent implements OnInit {\n  title = 'Dog Breeds Hub';\n  breeds: DogBreed[] = [];\n  posts: DogPost[] = [];\n  filteredBreeds: DogBreed[] = [];\n  filteredPosts: DogPost[] = [];\n\n  constructor(private dogService: DogService, private router: Router) {}\n\n  ngOnInit() {\n    this.loadBreeds();\n    this.loadPosts();\n  }\n\n  loadBreeds() {\n    this.dogService.getDogBreeds().subscribe(breeds => {\n      this.breeds = breeds;\n      this.filteredBreeds = breeds;\n    });\n  }\n\n  loadPosts() {\n    this.dogService.getDogPosts().subscribe(posts => {\n      this.posts = posts;\n      this.filteredPosts = posts;\n    });\n  }\n\n  onSearchChange(query: string) {\n    if (query.trim() !== '') {\n      this.router.navigate(['/search'], { queryParams: { q: query } });\n    }\n  }\n\n  onCategoryChange(category: DogCategory | null) {\n    if (category === null) {\n      this.filteredBreeds = this.breeds;\n      this.filteredPosts = this.posts;\n    } else {\n      this.dogService.getBreedsByCategory(category).subscribe(breeds => {\n        this.filteredBreeds = breeds;\n      });\n      this.dogService.getPostsByCategory(category).subscribe(posts => {\n        this.filteredPosts = posts;\n      });\n    }\n  }\n}\n", "\n<app-header \n  (searchChange)=\"onSearchChange($event)\"\n  (categoryChange)=\"onCategoryChange($event)\">\n</app-header>\n\n<router-outlet></router-outlet>\n\n<footer class=\"footer\">\n  <div class=\"footer-content\">\n    <p>&copy; 2024 Dog Breeds Hub. Made with ‚ù§Ô∏è for dog lovers.</p>\n  </div>\n</footer>\n\n<!-- Animated Dog Assistant -->\n<app-dog-assistant></app-dog-assistant>\n", "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { DogBreed } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-dog-breeds',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './dog-breeds.component.html',\n  styleUrls: ['./dog-breeds.component.css']\n})\nexport class DogBreedsComponent {\n  @Input() breeds: DogBreed[] = [];\n}", "<div class=\"breeds-section\">\n  <h2>Dog Breeds</h2>\n  <div class=\"breeds-grid\">\n    <div class=\"breed-card\" *ngFor=\"let breed of breeds\" [routerLink]=\"['/breed', breed.id]\">\n      <img [src]=\"breed.image\" [alt]=\"breed.name\" class=\"breed-image\">\n      <div class=\"breed-info\">\n        <h3>{{ breed.name }}</h3>\n        <p class=\"breed-description\">{{ breed.description }}</p>\n        <div class=\"breed-traits\">\n          <span class=\"trait-tag\" *ngFor=\"let trait of breed.temperament\">{{ trait }}</span>\n        </div>\n        <div class=\"breed-stats\">\n          <div class=\"stat\">\n            <label>Size:</label>\n            <span>{{ breed.size }}</span>\n          </div>\n          <div class=\"breed-stat\">\n            <span class=\"stat-label\">Energy Level:</span>\n            <span>{{ breed.energyLevel || 3 }}/5</span>\n          </div>\n          <div class=\"breed-stat\">\n            <span class=\"stat-label\">Grooming Needs:</span>\n            <span>{{ breed.groomingNeeds || 3 }}/5</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"no-breeds\" *ngIf=\"breeds.length === 0\">\n    <p>No breeds found. Try adjusting your search or filters.</p>\n  </div>\n</div>", "\nimport { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { DogPost } from '../../models/dog.model';\nimport { AuthService } from '../../services/auth.service';\nimport { User } from '../../models/user.model';\n\ninterface Comment {\n  id: string;\n  content: string;\n  authorName: string;\n  authorAvatar: string;\n  createdAt: Date;\n  likes: number;\n}\n\n@Component({\n  selector: 'app-latest-posts',\n  standalone: true,\n  imports: [CommonModule, RouterLink, FormsModule],\n  templateUrl: './latest-posts.component.html',\n  styleUrls: ['./latest-posts.component.css']\n})\nexport class LatestPostsComponent {\n  @Input() posts: DogPost[] = [];\n  \n  currentUser: User | null = null;\n  isAuthenticated: boolean = false;\n  newComments: { [postId: string]: string } = {};\n  \n  // Mock comments data\n  private comments: { [postId: string]: Comment[] } = {\n    '1': [\n      {\n        id: 'c1',\n        content: 'Great article! Very helpful information.',\n        authorName: 'John Doe',\n        authorAvatar: 'üë®',\n        createdAt: new Date('2024-01-16'),\n        likes: 5\n      }\n    ],\n    '2': [\n      {\n        id: 'c2',\n        content: 'This helped me create a better space for my dog.',\n        authorName: 'Jane Smith',\n        authorAvatar: 'üë©',\n        createdAt: new Date('2024-01-11'),\n        likes: 3\n      }\n    ]\n  };\n\n  private likedComments: Set<string> = new Set();\n\n  constructor(private authService: AuthService) {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n      this.isAuthenticated = !!user;\n    });\n  }\n\n  trackByPostId(index: number, post: DogPost): string {\n    return post.id;\n  }\n\n  getCommentsCount(postId: string): number {\n    return this.comments[postId]?.length || 0;\n  }\n\n  getPostComments(postId: string): Comment[] {\n    return this.comments[postId] || [];\n  }\n\n  likeComment(commentId: string): void {\n    if (this.likedComments.has(commentId)) {\n      this.likedComments.delete(commentId);\n    } else {\n      this.likedComments.add(commentId);\n    }\n  }\n\n  hasLikedComment(commentId: string): boolean {\n    return this.likedComments.has(commentId);\n  }\n\n  addComment(postId: string): void {\n    const content = this.newComments[postId];\n    if (!content || !content.trim() || !this.currentUser) return;\n\n    const newComment: Comment = {\n      id: `c${Date.now()}`,\n      content: content.trim(),\n      authorName: this.currentUser.name || this.currentUser.username,\n      authorAvatar: this.currentUser.avatar || 'üë§',\n      createdAt: new Date(),\n      likes: 0\n    };\n\n    if (!this.comments[postId]) {\n      this.comments[postId] = [];\n    }\n    this.comments[postId].push(newComment);\n    this.newComments[postId] = '';\n  }\n\n  showLogin(): void {\n    // This would trigger the login modal\n    console.log('Show login modal');\n  }\n}\n", "\n<div class=\"latest-posts\">\n  <div class=\"posts-grid\" *ngIf=\"posts.length > 0; else noPosts\">\n    <article class=\"post-card\" *ngFor=\"let post of posts; trackBy: trackByPostId\">\n      <div class=\"post-header\">\n        <div class=\"author-info\">\n          <img [src]=\"post.authorAvatar\" [alt]=\"post.authorName\" class=\"author-avatar\">\n          <div class=\"author-details\">\n            <h4>{{ post.authorName }}</h4>\n            <span class=\"post-date\">{{ post.createdAt | date:'short' }}</span>\n          </div>\n        </div>\n        <span class=\"status-badge\" [class]=\"post.status\">{{ post.status }}</span>\n      </div>\n\n      <div class=\"post-content\">\n        <h3><a [routerLink]=\"['/post', post.id]\">{{ post.title }}</a></h3>\n        <p class=\"post-excerpt\">{{ post.content | slice:0:200 }}{{ post.content.length > 200 ? '...' : '' }}</p>\n        \n        <img *ngIf=\"post.image\" [src]=\"post.image\" [alt]=\"post.title\" class=\"post-image\">\n        \n        <div class=\"post-tags\" *ngIf=\"post.tags.length > 0\">\n          <span \n            class=\"tag\" \n            *ngFor=\"let tag of post.tags\"\n            [routerLink]=\"['/hashtag', tag]\">\n            #{{ tag }}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"post-footer\">\n        <div class=\"post-stats\">\n          <span class=\"stat\">\n            <i class=\"icon-like\">üëç</i>\n            {{ post.likes || 0 }}\n          </span>\n          <span class=\"stat\">\n            <i class=\"icon-comment\">üí¨</i>\n            {{ getCommentsCount(post.id) }}\n          </span>\n          <span class=\"stat\">\n            <i class=\"icon-view\">üëÄ</i>\n            {{ post.views || 0 }}\n          </span>\n        </div>\n        \n        <div class=\"post-actions\">\n          <button class=\"action-btn\" [routerLink]=\"['/post', post.id]\">\n            Read More\n          </button>\n        </div>\n      </div>\n\n      <!-- Comments Section -->\n      <div class=\"comments-section\" *ngIf=\"getPostComments(post.id).length > 0\">\n        <h5>Recent Comments</h5>\n        <div class=\"comment\" *ngFor=\"let comment of getPostComments(post.id) | slice:0:2\">\n          <div class=\"comment-header\">\n            <img [src]=\"comment.authorAvatar\" [alt]=\"comment.authorName\" class=\"comment-avatar\">\n            <div class=\"comment-info\">\n              <span class=\"comment-author\">{{ comment.authorName }}</span>\n              <span class=\"comment-date\">{{ comment.createdAt | date:'short' }}</span>\n            </div>\n          </div>\n          <p class=\"comment-content\">{{ comment.content }}</p>\n          <div class=\"comment-actions\">\n            <button \n              class=\"like-btn\" \n              (click)=\"likeComment(comment.id)\"\n              [class.liked]=\"hasLikedComment(comment.id)\">\n              üëç {{ comment.likes || 0 }}\n            </button>\n          </div>\n        </div>\n        \n        <!-- Add Comment Form -->\n        <div class=\"add-comment\" *ngIf=\"isAuthenticated\">\n          <textarea \n            [(ngModel)]=\"newComments[post.id]\"\n            placeholder=\"Add a comment...\"\n            class=\"comment-input\"\n            rows=\"2\"></textarea>\n          <button \n            (click)=\"addComment(post.id)\"\n            class=\"comment-btn\"\n            [disabled]=\"!newComments[post.id] || !newComments[post.id].trim()\">\n            Post Comment\n          </button>\n        </div>\n        \n        <div class=\"login-prompt\" *ngIf=\"!isAuthenticated\">\n          <p>Please <a href=\"#\" (click)=\"showLogin()\">login</a> to add comments.</p>\n        </div>\n      </div>\n    </article>\n  </div>\n\n  <ng-template #noPosts>\n    <div class=\"no-posts\">\n      <div class=\"no-posts-icon\">üìù</div>\n      <h3>No posts yet</h3>\n      <p>Be the first to share something with the community!</p>\n      <a routerLink=\"/community\" class=\"create-post-btn\">Create Post</a>\n    </div>\n  </ng-template>\n</div>\n", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { DogBreedsComponent } from '../dog-breeds/dog-breeds.component';\nimport { LatestPostsComponent } from '../latest-posts/latest-posts.component';\nimport { DogService } from '../../services/dog.service';\nimport { DogBreed, DogPost, DogCategory } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-home',\n  standalone: true,\n  imports: [CommonModule, RouterLink, DogBreedsComponent, LatestPostsComponent],\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  breeds: DogBreed[] = [];\n  posts: DogPost[] = [];\n  filteredBreeds: DogBreed[] = [];\n  filteredPosts: DogPost[] = [];\n\n  constructor(private dogService: DogService) {}\n\n  ngOnInit() {\n    this.loadBreeds();\n    this.loadPosts();\n  }\n\n  loadBreeds() {\n    this.dogService.getDogBreeds().subscribe(breeds => {\n      this.breeds = breeds;\n      this.filteredBreeds = breeds;\n    });\n  }\n\n  loadPosts() {\n    this.dogService.getDogPosts().subscribe(posts => {\n      this.posts = posts;\n      this.filteredPosts = posts;\n    });\n  }\n\n  onSearchChange(query: string) {\n    if (query.trim() === '') {\n      this.filteredBreeds = this.breeds;\n    } else {\n      this.dogService.searchBreeds(query).subscribe(breeds => {\n        this.filteredBreeds = breeds;\n      });\n    }\n  }\n\n  onCategoryChange(category: DogCategory | null) {\n    if (category === null) {\n      this.filteredBreeds = this.breeds;\n      this.filteredPosts = this.posts;\n    } else {\n      this.dogService.getBreedsByCategory(category).subscribe(breeds => {\n        this.filteredBreeds = breeds;\n      });\n      this.dogService.getPostsByCategory(category).subscribe(posts => {\n        this.filteredPosts = posts;\n      });\n    }\n  }\n\n  categories = [\n    {\n      id: 'small-breeds',\n      name: 'Small Breeds',\n      description: 'Perfect companions for apartments',\n      icon: 'üêï‚Äçü¶∫'\n    },\n    {\n      id: 'large-breeds',\n      name: 'Large Breeds',\n      description: 'Majestic and loyal guardians',\n      icon: 'üêï‚Äçü¶Æ'\n    },\n    {\n      id: 'working-dogs',\n      name: 'Working Dogs',\n      description: 'Intelligent and purpose-driven',\n      icon: 'ü¶¥'\n    },\n    {\n      id: 'family-dogs',\n      name: 'Family Dogs',\n      description: 'Great with children and families',\n      icon: 'üêæ'\n    },\n    {\n      id: 'training',\n      name: 'Training Tips',\n      description: 'Expert advice for dog training',\n      icon: 'üéæ'\n    },\n    {\n      id: 'health',\n      name: 'Health & Care',\n      description: 'Keep your dog healthy and happy',\n      icon: 'üè•'\n    }\n  ];\n}", "<div class=\"home-page\">\n  <!-- Hero Section -->\n  <section class=\"hero\">\n    <div class=\"hero-content\">\n      <h1>üêï Welcome to DogBreeds Hub</h1>\n      <p class=\"hero-subtitle\">Your ultimate destination for everything about dog breeds, care tips, and community discussions.</p>\n      <div class=\"hero-actions\">\n        <a routerLink=\"/community\" class=\"cta-btn primary\">Join Community</a>\n        <a routerLink=\"/breeds\" class=\"cta-btn secondary\">Explore Breeds</a>\n      </div>\n    </div>\n    <div class=\"hero-image\">\n      <div class=\"floating-emojis\">\n        <span class=\"emoji\">üêï</span>\n        <span class=\"emoji\">üê∂</span>\n        <span class=\"emoji\">ü¶¥</span>\n        <span class=\"emoji\">üéæ</span>\n        <span class=\"emoji\">‚ù§Ô∏è</span>\n      </div>\n    </div>\n  </section>\n\n  <!-- Featured Breeds Section -->\n  <section class=\"featured-section\">\n    <div class=\"section-header\">\n      <h2>üêï Top Dog Breeds üéæ</h2>\n      <p>Discover popular and unique dog breeds perfect for your lifestyle</p>\n    </div>\n    <app-dog-breeds [breeds]=\"filteredBreeds\"></app-dog-breeds>\n  </section>\n\n  <!-- Latest Posts Section -->\n  <section class=\"posts-section\">\n    <div class=\"section-header\">\n      <h2>Latest Community Posts</h2>\n      <p>See what fellow dog lovers are sharing</p>\n    </div>\n    <app-latest-posts [posts]=\"filteredPosts\"></app-latest-posts>\n  </section>\n\n  <!-- Features Section -->\n  <section class=\"features\">\n    <div class=\"features-grid\">\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">üîç</div>\n        <h3>Breed Search</h3>\n        <p>Find the perfect dog breed that matches your lifestyle and preferences.</p>\n      </div>\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">üë•</div>\n        <h3>Community</h3>\n        <p>Connect with fellow dog lovers, share experiences, and get advice.</p>\n      </div>\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">üìö</div>\n        <h3>Care Guides</h3>\n        <p>Access comprehensive guides on dog care, training, and health.</p>\n      </div>\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">üí¨</div>\n        <h3>Expert Advice</h3>\n        <p>Get professional advice from veterinarians and dog experts.</p>\n      </div>\n    </div>\n  </section>\n</div>", "\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { DogService } from '../../services/dog.service';\nimport { DogPost, DogBreed } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-category-page',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  template: `\n    <div class=\"category-page\">\n      <div class=\"category-header\">\n        <h1>{{ categoryTitle }}</h1>\n        <p>{{ categoryDescription }}</p>\n      </div>\n\n      <div class=\"category-content\">\n        <!-- Breeds Section -->\n        <div class=\"content-section\" *ngIf=\"breeds.length > 0\">\n          <h2>Related Dog Breeds</h2>\n          <div class=\"breeds-grid\">\n            <div *ngFor=\"let breed of breeds\" class=\"breed-card\">\n              <img [src]=\"breed.image\" [alt]=\"breed.name\" class=\"breed-image\">\n              <div class=\"breed-info\">\n                <h3>{{ breed.name }}</h3>\n                <p>{{ breed.description | slice:0:100 }}...</p>\n                <div class=\"breed-details\">\n                  <span class=\"size-badge\">{{ breed.size }}</span>\n                  <span class=\"origin\">{{ breed.origin }}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Posts Section -->\n        <div class=\"content-section\" *ngIf=\"posts.length > 0\">\n          <h2>Related Posts</h2>\n          <div class=\"posts-grid\">\n            <article *ngFor=\"let post of posts\" class=\"post-card\">\n              <div class=\"post-header\">\n                <div class=\"author-info\">\n                  <img [src]=\"post.author.avatar\" [alt]=\"post.author.name\" class=\"author-avatar\">\n                  <div>\n                    <h4>{{ post.author.name }}</h4>\n                    <time>{{ post.createdAt | date }}</time>\n                  </div>\n                </div>\n              </div>\n              <div class=\"post-content\">\n                <h3><a [routerLink]=\"['/post', post.id]\">{{ post.title }}</a></h3>\n                <p>{{ post.content | slice:0:200 }}{{ post.content.length > 200 ? '...' : '' }}</p>\n                <div class=\"post-tags\">\n                  <span *ngFor=\"let tag of post.tags\" class=\"tag\">\n                    <a [routerLink]=\"['/hashtag', tag]\">#{{ tag }}</a>\n                  </span>\n                </div>\n              </div>\n              <div class=\"post-actions\">\n                <span class=\"likes\">‚ù§Ô∏è {{ post.likes }}</span>\n                <span class=\"comments\">üí¨ {{ post.commentsCount || 0 }}</span>\n              </div>\n            </article>\n          </div>\n        </div>\n\n        <!-- No Content -->\n        <div class=\"no-content\" *ngIf=\"breeds.length === 0 && posts.length === 0\">\n          <h2>No content found</h2>\n          <p>We're working on adding more content for this category.</p>\n          <a routerLink=\"/\" class=\"back-home\">‚Üê Back to Home</a>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .category-page {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 2rem;\n    }\n\n    .category-header {\n      text-align: center;\n      margin-bottom: 3rem;\n      padding: 2rem;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      border-radius: 12px;\n    }\n\n    .category-header h1 {\n      margin-bottom: 0.5rem;\n      font-size: 2.5rem;\n    }\n\n    .content-section {\n      margin-bottom: 3rem;\n    }\n\n    .content-section h2 {\n      color: #333;\n      border-bottom: 3px solid #667eea;\n      padding-bottom: 0.5rem;\n      margin-bottom: 2rem;\n    }\n\n    .breeds-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 1.5rem;\n      margin-bottom: 3rem;\n    }\n\n    .breed-card {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      overflow: hidden;\n      transition: transform 0.3s ease;\n    }\n\n    .breed-card:hover {\n      transform: translateY(-5px);\n    }\n\n    .breed-image {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n    }\n\n    .breed-info {\n      padding: 1.5rem;\n    }\n\n    .breed-info h3 {\n      color: #333;\n      margin-bottom: 0.5rem;\n    }\n\n    .breed-details {\n      display: flex;\n      gap: 1rem;\n      margin-top: 1rem;\n      align-items: center;\n    }\n\n    .size-badge {\n      background: #667eea;\n      color: white;\n      padding: 0.25rem 0.75rem;\n      border-radius: 12px;\n      font-size: 0.8rem;\n    }\n\n    .origin {\n      color: #666;\n      font-style: italic;\n    }\n\n    .posts-grid {\n      display: grid;\n      gap: 1.5rem;\n    }\n\n    .post-card {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      padding: 1.5rem;\n      transition: transform 0.3s ease;\n    }\n\n    .post-card:hover {\n      transform: translateY(-2px);\n    }\n\n    .post-header {\n      margin-bottom: 1rem;\n    }\n\n    .author-info {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n    }\n\n    .author-avatar {\n      width: 40px;\n      height: 40px;\n      border-radius: 50%;\n      object-fit: cover;\n    }\n\n    .author-info h4 {\n      margin: 0;\n      color: #333;\n    }\n\n    .author-info time {\n      color: #666;\n      font-size: 0.9rem;\n    }\n\n    .post-content h3 {\n      margin-bottom: 0.5rem;\n    }\n\n    .post-content h3 a {\n      color: #333;\n      text-decoration: none;\n    }\n\n    .post-content h3 a:hover {\n      color: #667eea;\n    }\n\n    .post-tags {\n      margin: 1rem 0;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n    }\n\n    .tag a {\n      background: #f0f0f0;\n      color: #667eea;\n      padding: 0.25rem 0.5rem;\n      border-radius: 12px;\n      text-decoration: none;\n      font-size: 0.9rem;\n    }\n\n    .tag a:hover {\n      background: #667eea;\n      color: white;\n    }\n\n    .post-actions {\n      display: flex;\n      gap: 1rem;\n      padding-top: 1rem;\n      border-top: 1px solid #eee;\n      color: #666;\n    }\n\n    .no-content {\n      text-align: center;\n      padding: 3rem;\n      color: #666;\n    }\n\n    .back-home {\n      display: inline-block;\n      margin-top: 1rem;\n      padding: 0.75rem 1.5rem;\n      background: #667eea;\n      color: white;\n      text-decoration: none;\n      border-radius: 8px;\n      transition: background 0.3s ease;\n    }\n\n    .back-home:hover {\n      background: #5a6fd8;\n    }\n\n    @media (max-width: 768px) {\n      .category-page {\n        padding: 1rem;\n      }\n\n      .category-header h1 {\n        font-size: 2rem;\n      }\n\n      .breeds-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})\nexport class CategoryPageComponent implements OnInit {\n  category: string = '';\n  categoryTitle: string = '';\n  categoryDescription: string = '';\n  breeds: DogBreed[] = [];\n  posts: DogPost[] = [];\n\n  categoryConfig: { [key: string]: { title: string; description: string } } = {\n    'small-breeds': {\n      title: 'Small Dog Breeds',\n      description: 'Discover adorable small dog breeds perfect for apartments and families.'\n    },\n    'large-breeds': {\n      title: 'Large Dog Breeds',\n      description: 'Explore majestic large dog breeds known for their loyalty and strength.'\n    },\n    'working-dogs': {\n      title: 'Working Dogs',\n      description: 'Learn about intelligent working dog breeds and their special abilities.'\n    },\n    'family-dogs': {\n      title: 'Family Dogs',\n      description: 'Find the best family-friendly dog breeds for homes with children.'\n    },\n    'training': {\n      title: 'Dog Training',\n      description: 'Tips, techniques, and guides for training your beloved companion.'\n    },\n    'health': {\n      title: 'Dog Health',\n      description: 'Essential health information to keep your dog happy and healthy.'\n    },\n    'nutrition': {\n      title: 'Dog Nutrition',\n      description: 'Learn about proper nutrition and feeding for optimal dog health.'\n    },\n    'grooming': {\n      title: 'Dog Grooming',\n      description: 'Professional grooming tips and techniques for all breeds.'\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private dogService: DogService\n  ) {}\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.category = params['category'];\n      this.setupCategory();\n      this.loadCategoryContent();\n    });\n  }\n\n  setupCategory() {\n    const config = this.categoryConfig[this.category];\n    if (config) {\n      this.categoryTitle = config.title;\n      this.categoryDescription = config.description;\n    } else {\n      this.categoryTitle = this.category.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n      this.categoryDescription = `Explore everything related to ${this.categoryTitle.toLowerCase()}.`;\n    }\n  }\n\n  loadCategoryContent() {\n    // Load breeds by category\n    this.dogService.getBreedsByCategory(this.category).subscribe(breeds => {\n      this.breeds = breeds;\n    });\n\n    // Load posts by category\n    this.dogService.getPostsByCategory(this.category).subscribe(posts => {\n      this.posts = posts;\n    });\n  }\n}\n", "\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { DogService } from '../../services/dog.service';\nimport { DogPost, DogBreed } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-search-page',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  template: `\n    <div class=\"search-page\">\n      <div class=\"search-header\">\n        <h1>Search Results</h1>\n        <p *ngIf=\"searchQuery\">Showing results for: <strong>\"{{ searchQuery }}\"</strong></p>\n      </div>\n\n      <div class=\"search-results\">\n        <!-- Breeds Results -->\n        <div class=\"results-section\" *ngIf=\"breeds.length > 0\">\n          <h2>Dog Breeds ({{ breeds.length }})</h2>\n          <div class=\"breeds-grid\">\n            <div *ngFor=\"let breed of breeds\" class=\"breed-card\">\n              <img [src]=\"breed.image\" [alt]=\"breed.name\" class=\"breed-image\">\n              <div class=\"breed-info\">\n                <h3>{{ breed.name }}</h3>\n                <p>{{ breed.description }}</p>\n                <span class=\"size-badge\">{{ breed.size }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Posts Results -->\n        <div class=\"results-section\" *ngIf=\"posts.length > 0\">\n          <h2>Posts ({{ posts.length }})</h2>\n          <div class=\"posts-grid\">\n            <article *ngFor=\"let post of posts\" class=\"post-card\">\n              <div class=\"post-header\">\n                <div class=\"author-info\">\n                  <img [src]=\"post.author.avatar\" [alt]=\"post.author.name\" class=\"author-avatar\">\n                  <div>\n                    <h4>{{ post.author.name }}</h4>\n                    <time>{{ post.createdAt | date }}</time>\n                  </div>\n                </div>\n              </div>\n              <div class=\"post-content\">\n                <h3><a [routerLink]=\"['/post', post.id]\">{{ post.title }}</a></h3>\n                <p>{{ post.content | slice:0:200 }}{{ post.content.length > 200 ? '...' : '' }}</p>\n                <div class=\"post-tags\">\n                  <span *ngFor=\"let tag of post.tags\" class=\"tag\">\n                    <a [routerLink]=\"['/hashtag', tag]\">#{{ tag }}</a>\n                  </span>\n                </div>\n              </div>\n              <div class=\"post-actions\">\n                <span class=\"likes\">‚ù§Ô∏è {{ post.likes }}</span>\n                <span class=\"comments\">üí¨ {{ post.commentsCount || 0 }}</span>\n              </div>\n            </article>\n          </div>\n        </div>\n\n        <!-- No Results -->\n        <div class=\"no-results\" *ngIf=\"breeds.length === 0 && posts.length === 0 && searchQuery\">\n          <h2>No results found</h2>\n          <p>Try searching with different keywords or browse our categories.</p>\n          <a routerLink=\"/\" class=\"back-home\">‚Üê Back to Home</a>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .search-page {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 2rem;\n    }\n\n    .search-header {\n      text-align: center;\n      margin-bottom: 3rem;\n    }\n\n    .search-header h1 {\n      color: #333;\n      margin-bottom: 0.5rem;\n    }\n\n    .results-section {\n      margin-bottom: 3rem;\n    }\n\n    .results-section h2 {\n      color: #333;\n      border-bottom: 3px solid #667eea;\n      padding-bottom: 0.5rem;\n      margin-bottom: 2rem;\n    }\n\n    .breeds-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 1.5rem;\n      margin-bottom: 3rem;\n    }\n\n    .breed-card {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      overflow: hidden;\n      transition: transform 0.3s ease;\n    }\n\n    .breed-card:hover {\n      transform: translateY(-5px);\n    }\n\n    .breed-image {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n    }\n\n    .breed-info {\n      padding: 1.5rem;\n    }\n\n    .breed-info h3 {\n      color: #333;\n      margin-bottom: 0.5rem;\n    }\n\n    .size-badge {\n      background: #667eea;\n      color: white;\n      padding: 0.25rem 0.75rem;\n      border-radius: 12px;\n      font-size: 0.8rem;\n    }\n\n    .posts-grid {\n      display: grid;\n      gap: 1.5rem;\n    }\n\n    .post-card {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      padding: 1.5rem;\n      transition: transform 0.3s ease;\n    }\n\n    .post-card:hover {\n      transform: translateY(-2px);\n    }\n\n    .post-header {\n      margin-bottom: 1rem;\n    }\n\n    .author-info {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n    }\n\n    .author-avatar {\n      width: 40px;\n      height: 40px;\n      border-radius: 50%;\n      object-fit: cover;\n    }\n\n    .author-info h4 {\n      margin: 0;\n      color: #333;\n    }\n\n    .author-info time {\n      color: #666;\n      font-size: 0.9rem;\n    }\n\n    .post-content h3 {\n      margin-bottom: 0.5rem;\n    }\n\n    .post-content h3 a {\n      color: #333;\n      text-decoration: none;\n    }\n\n    .post-content h3 a:hover {\n      color: #667eea;\n    }\n\n    .post-tags {\n      margin: 1rem 0;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n    }\n\n    .tag a {\n      background: #f0f0f0;\n      color: #667eea;\n      padding: 0.25rem 0.5rem;\n      border-radius: 12px;\n      text-decoration: none;\n      font-size: 0.9rem;\n    }\n\n    .tag a:hover {\n      background: #667eea;\n      color: white;\n    }\n\n    .post-actions {\n      display: flex;\n      gap: 1rem;\n      padding-top: 1rem;\n      border-top: 1px solid #eee;\n      color: #666;\n    }\n\n    .no-results {\n      text-align: center;\n      padding: 3rem;\n      color: #666;\n    }\n\n    .back-home {\n      display: inline-block;\n      margin-top: 1rem;\n      padding: 0.75rem 1.5rem;\n      background: #667eea;\n      color: white;\n      text-decoration: none;\n      border-radius: 8px;\n      transition: background 0.3s ease;\n    }\n\n    .back-home:hover {\n      background: #5a6fd8;\n    }\n\n    @media (max-width: 768px) {\n      .search-page {\n        padding: 1rem;\n      }\n\n      .breeds-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})\nexport class SearchPageComponent implements OnInit {\n  searchQuery: string = '';\n  breeds: DogBreed[] = [];\n  posts: DogPost[] = [];\n\n  constructor(\n    private route: ActivatedRoute,\n    private dogService: DogService\n  ) {}\n\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.searchQuery = params['q'] || '';\n      if (this.searchQuery) {\n        this.performSearch();\n      }\n    });\n  }\n\n  performSearch() {\n    this.dogService.searchBreeds(this.searchQuery).subscribe((breeds: DogBreed[]) => {\n      this.breeds = breeds;\n    });\n\n    this.dogService.searchPosts(this.searchQuery).subscribe((posts: DogPost[]) => {\n      this.posts = posts;\n    });\n  }\n}\n", "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { DogService } from '../../services/dog.service';\nimport { DogPost } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-hashtag-page',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './hashtag-page.component.html',\n  styleUrls: ['./hashtag-page.component.css']\n})\nexport class HashtagPageComponent implements OnInit {\n  currentTag: string = '';\n  hashtag: string = '';\n  posts: DogPost[] = [];\n  relatedHashtags: string[] = [];\n\n  constructor(\n    private route: ActivatedRoute,\n    private dogService: DogService\n  ) {}\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.currentTag = params['tag'];\n      this.hashtag = params['tag'];\n      this.loadPostsByTag(this.currentTag);\n    });\n  }\n\n  loadPostsByTag(tag: string) {\n    this.dogService.getPostsByTag(tag).subscribe(posts => {\n      this.posts = posts;\n      // Extract related hashtags from posts\n      this.relatedHashtags = this.extractRelatedHashtags(posts);\n    });\n  }\n\n  private extractRelatedHashtags(posts: DogPost[]): string[] {\n    const hashtags = new Set<string>();\n    posts.forEach(post => {\n      post.tags.forEach(tag => {\n        if (tag !== this.currentTag) {\n          hashtags.add(tag);\n        }\n      });\n    });\n    return Array.from(hashtags).slice(0, 5); // Return first 5 related hashtags\n  }\n}", "<div class=\"hashtag-page\">\n  <div class=\"hashtag-header\">\n    <h1>#{{ hashtag }}</h1>\n    <p class=\"hashtag-description\">Posts tagged with #{{ hashtag }}</p>\n    <div class=\"hashtag-stats\">\n      <span class=\"post-count\">{{ posts.length }} posts</span>\n    </div>\n  </div>\n\n  <div class=\"posts-container\" *ngIf=\"posts.length > 0; else noPosts\">\n    <div class=\"post-grid\">\n      <div class=\"post-card\" *ngFor=\"let post of posts\">\n        <div class=\"post-header\">\n          <div class=\"author-info\">\n            <img [src]=\"post.author.avatar\" [alt]=\"post.author.name\" class=\"author-avatar\">\n            <div class=\"author-details\">\n              <h4>{{ post.author.name }}</h4>\n              <span class=\"post-date\">{{ post.createdAt | date:'short' }}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"post-content\">\n          <h3><a [routerLink]=\"['/post', post.id]\">{{ post.title }}</a></h3>\n          <p class=\"post-excerpt\">{{ post.content | slice:0:150 }}{{ post.content.length > 150 ? '...' : '' }}</p>\n\n          <img *ngIf=\"post.image\" [src]=\"post.image\" [alt]=\"post.title\" class=\"post-image\">\n\n          <div class=\"post-tags\">\n            <span \n              class=\"tag\" \n              *ngFor=\"let tag of post.tags\"\n              [routerLink]=\"['/hashtag', tag]\">\n              #{{ tag }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"post-stats\">\n          <span class=\"stat\">\n            <i class=\"icon-like\"></i>\n            {{ post.likes || 0 }} likes\n          </span>\n          <span class=\"stat\">\n            <i class=\"icon-comment\"></i>\n            {{ post.comments || 0 }} comments\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #noPosts>\n    <div class=\"no-posts\">\n      <h2>No posts found for #{{ hashtag }}</h2>\n      <p>Be the first to create a post with this hashtag!</p>\n      <a routerLink=\"/community\" class=\"create-post-btn\">Create Post</a>\n    </div>\n  </ng-template>\n\n  <div class=\"related-hashtags\" *ngIf=\"relatedHashtags.length > 0\">\n    <h3>Related Hashtags</h3>\n    <div class=\"hashtag-cloud\">\n      <a \n        *ngFor=\"let related of relatedHashtags\" \n        [routerLink]=\"['/hashtag', related]\"\n        class=\"hashtag-link\">\n        #{{ related }}\n      </a>\n    </div>\n  </div>\n</div>", "\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { Comment } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n  private commentsSubject = new BehaviorSubject<Comment[]>([]);\n  public comments$ = this.commentsSubject.asObservable();\n\n  private mockComments: Comment[] = [\n    {\n      id: '1',\n      postId: '1',\n      userId: '1',\n      userName: 'dogLover123',\n      userAvatar: 'üêï',\n      content: 'Great article! My Golden Retriever loves the recommended food.',\n      date: new Date('2024-01-16'),\n      likes: 5,\n      likedBy: [],\n      replies: [],\n      level: 0,\n      shares: 0\n    },\n    {\n      id: '2',\n      postId: '2',\n      userId: '1',\n      userName: 'dogLover123',\n      userAvatar: 'üêï',\n      content: 'These tips really helped me create a safer environment for my puppy.',\n      date: new Date('2024-01-11'),\n      likes: 3,\n      likedBy: [],\n      replies: [],\n      level: 0,\n      shares: 0\n    }\n  ];\n\n  constructor() {\n    this.commentsSubject.next(this.mockComments);\n  }\n\n  getCommentsByPostId(postId: string): Observable<Comment[]> {\n    const postComments = this.mockComments.filter(comment => comment.postId === postId);\n    return of(postComments);\n  }\n\n  addComment(postId: string, content: string, userId: string, userName: string, userAvatar?: string): Observable<Comment> {\n    const newComment: Comment = {\n      id: Date.now().toString(),\n      postId,\n      userId,\n      userName,\n      userAvatar: userAvatar || 'üê∂',\n      content,\n      date: new Date(),\n      likes: 0,\n      likedBy: [],\n      replies: [],\n      level: 0,\n      shares: 0\n    };\n\n    this.mockComments.push(newComment);\n    this.commentsSubject.next([...this.mockComments]);\n    return of(newComment);\n  }\n\n  addReply(postId: string, content: string, parentId: string, userId: string, userName: string, userAvatar?: string): Observable<Comment> {\n    const parentComment = this.mockComments.find(c => c.id === parentId);\n    const parentLevel = parentComment ? parentComment.level : 0;\n    \n    const newReply: Comment = {\n      id: Date.now().toString(),\n      postId,\n      userId,\n      userName,\n      userAvatar: userAvatar || 'üê∂',\n      content,\n      date: new Date(),\n      likes: 0,\n      likedBy: [],\n      parentId: parentId,\n      replies: [],\n      level: Math.min(parentLevel + 1, 2), // Max 3 levels (0, 1, 2)\n      shares: 0\n    };\n\n    this.mockComments.push(newReply);\n    this.commentsSubject.next([...this.mockComments]);\n    return of(newReply);\n  }\n\n  likeComment(commentId: string): Observable<Comment> {\n    const comment = this.mockComments.find(c => c.id === commentId);\n    if (comment) {\n      comment.likes++;\n      this.commentsSubject.next([...this.mockComments]);\n      return of(comment);\n    }\n    throw new Error('Comment not found');\n  }\n}\n", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { DogService } from '../../services/dog.service';\nimport { CommentsService } from '../../services/comments.service';\nimport { AuthService } from '../../services/auth.service';\nimport { DogPost } from '../../models/dog.model';\nimport { Comment, User } from '../../models/user.model';\n\n@Component({\n  selector: 'app-post-detail',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterLink],\n  templateUrl: './post-detail.component.html',\n  styleUrls: ['./post-detail.component.css']\n})\nexport class PostDetailComponent implements OnInit {\n  post: DogPost | null = null;\n  comments: Comment[] = [];\n  newComment: string = '';\n  currentUser: User | null = null;\n  likedComments = new Set<string>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private dogService: DogService,\n    private commentsService: CommentsService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit() {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n\n    this.route.params.subscribe(params => {\n      const postId = params['id'];\n      this.loadPost(postId);\n      this.loadComments(postId);\n    });\n  }\n\n  loadPost(postId: string) {\n    this.dogService.getPostById(postId).subscribe(post => {\n      this.post = post;\n    });\n  }\n\n  loadComments(postId: string) {\n    this.commentsService.getCommentsByPostId(postId).subscribe((comments: Comment[]) => {\n      this.comments = comments;\n    });\n  }\n\n  addComment() {\n    if (!this.newComment.trim() || !this.currentUser || !this.post) return;\n\n    this.commentsService.addComment(\n      this.post.id,\n      this.newComment,\n      this.currentUser.id,\n      this.currentUser.username,\n      this.currentUser.avatar\n    ).subscribe(comment => {\n      this.comments.push(comment);\n      this.newComment = '';\n    });\n  }\n\n  likeComment(commentId: string) {\n    this.commentsService.likeComment(commentId).subscribe(() => {\n      this.likedComments.add(commentId);\n      const comment = this.comments.find(c => c.id === commentId);\n      if (comment) {\n        comment.likes++;\n      }\n    });\n  }\n\n  hasLikedComment(commentId: string): boolean {\n    return this.likedComments.has(commentId);\n  }\n}", "\n<div class=\"post-detail-container\" *ngIf=\"post\">\n  <article class=\"post-article\">\n    <div class=\"post-header\">\n      <h1 class=\"post-title\">{{ post.title }}</h1>\n      <div class=\"post-meta\">\n        <span class=\"author\">By {{ post.author }}</span>\n        <span class=\"date\">{{ post.date | date:'fullDate' }}</span>\n        <span class=\"category-badge\" [class]=\"'category-' + post.category\">\n          {{ post.category | titlecase }}\n        </span>\n      </div>\n    </div>\n\n    <div class=\"post-image-container\">\n      <img [src]=\"post.image\" [alt]=\"post.title\" class=\"post-image\">\n    </div>\n\n    <div class=\"post-content\">\n      <div class=\"post-body\">\n        {{ post.content }}\n      </div>\n\n      <div class=\"post-tags\">\n        <span class=\"tags-label\">Tags:</span>\n        <a \n          *ngFor=\"let tag of post.tags\" \n          [routerLink]=\"['/hashtag', tag]\"\n          class=\"tag-link\">\n          #{{ tag }}\n        </a>\n      </div>\n    </div>\n  </article>\n\n  <!-- Comments Section -->\n  <div class=\"comments-section\">\n    <h3>Comments ({{ comments.length }})</h3>\n\n    <div class=\"add-comment\" *ngIf=\"currentUser\">\n      <div class=\"comment-form\">\n        <div class=\"user-avatar\">\n          {{ currentUser.avatar || 'üë§' }}\n        </div>\n        <div class=\"input-container\">\n          <textarea \n            [(ngModel)]=\"newComment\"\n            placeholder=\"Write a comment...\"\n            class=\"comment-input\"\n            rows=\"3\">\n          </textarea>\n          <button \n            (click)=\"addComment()\"\n            class=\"comment-btn\"\n            [disabled]=\"!newComment || !newComment.trim()\">\n            Post Comment\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"login-prompt\" *ngIf=\"!currentUser\">\n      <p>Please <a href=\"#\" class=\"login-link\">login</a> to leave a comment.</p>\n    </div>\n\n    <div class=\"comments-list\">\n      <div *ngFor=\"let comment of comments\" class=\"comment\">\n        <div class=\"comment-avatar\">\n          {{ comment.userAvatar || 'üë§' }}\n        </div>\n        <div class=\"comment-content\">\n          <div class=\"comment-header\">\n            <span class=\"comment-author\">{{ comment.userName }}</span>\n            <span class=\"comment-date\">{{ comment.date | date:'short' }}</span>\n          </div>\n          <p class=\"comment-text\">{{ comment.content }}</p>\n          <div class=\"comment-actions\">\n            <button \n              (click)=\"likeComment(comment.id)\"\n              class=\"like-btn\"\n              [class.liked]=\"hasLikedComment(comment.id)\">\n              üëç {{ comment.likes }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { DogService } from '../../services/dog.service';\nimport { AuthService } from '../../services/auth.service';\nimport { CommentsService } from '../../services/comments.service';\nimport { DogPost, MediaItem } from '../../models/dog.model';\nimport { User, Comment } from '../../models/user.model';\n\n@Component({\n  selector: 'app-community',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterLink],\n  templateUrl: './community.component.html',\n  styleUrls: ['./community.component.css']\n})\nexport class CommunityComponent implements OnInit {\n  currentUser: User | null = null;\n  communityPosts: DogPost[] = [];\n  filteredPosts: DogPost[] = [];\n  selectedStatus: string = 'approved';\n  showCreatePost = false;\n\n  newPost = {\n    title: '',\n    content: '',\n    tagsString: '',\n    media: [] as MediaItem[]\n  };\n\n  postComments: { [postId: string]: Comment[] } = {};\n  newComments: { [postId: string]: string } = {};\n  replyingTo: { [commentId: string]: boolean } = {};\n  replyTexts: { [commentId: string]: string } = {};\n\n  statusFilters = [\n    { value: 'approved', label: 'Approved Posts' },\n    { value: 'all', label: 'All Posts' },\n    { value: 'pending', label: 'Pending Review' }\n  ];\n\n  constructor(\n    private dogService: DogService,\n    private authService: AuthService,\n    private commentsService: CommentsService\n  ) {}\n\n  ngOnInit() {\n    this.authService.currentUser$.subscribe((user: User | null) => {\n      this.currentUser = user;\n    });\n\n    this.loadCommunityPosts();\n  }\n\n  loadCommunityPosts() {\n    this.dogService.getCommunityPosts().subscribe((posts: DogPost[]) => {\n      this.communityPosts = posts;\n      this.filterByStatus(this.selectedStatus);\n\n      // Load comments for each post\n      posts.forEach(post => {\n        this.loadPostComments(post.id);\n      });\n    });\n  }\n\n  loadPostComments(postId: string) {\n    this.commentsService.getCommentsByPostId(postId).subscribe(comments => {\n      this.postComments[postId] = this.organizeComments(comments);\n    });\n  }\n\n  organizeComments(comments: Comment[]): Comment[] {\n    const commentMap = new Map<string, Comment>();\n    const rootComments: Comment[] = [];\n\n    // First pass: create map and initialize replies\n    comments.forEach(comment => {\n      comment.replies = [];\n      commentMap.set(comment.id, comment);\n    });\n\n    // Second pass: organize hierarchy\n    comments.forEach(comment => {\n      if (comment.parentId && commentMap.has(comment.parentId)) {\n        const parent = commentMap.get(comment.parentId)!;\n        if (parent.level < 2) { // Max 3 levels (0, 1, 2)\n          comment.level = parent.level + 1;\n          parent.replies.push(comment);\n        }\n      } else {\n        comment.level = 0;\n        rootComments.push(comment);\n      }\n    });\n\n    return rootComments;\n  }\n\n  filterByStatus(status: string) {\n    this.selectedStatus = status;\n    if (status === 'all') {\n      this.filteredPosts = this.communityPosts;\n    } else {\n      this.filteredPosts = this.communityPosts.filter((post: DogPost) => post.status === status);\n    }\n  }\n\n  onMediaSelect(event: any) {\n    const files = Array.from(event.target.files) as File[];\n    files.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const mediaItem: MediaItem = {\n          id: Date.now().toString() + Math.random(),\n          type: file.type.startsWith('video/') ? 'video' : 'image',\n          url: e.target?.result as string,\n          caption: ''\n        };\n        this.newPost.media.push(mediaItem);\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  removeMedia(index: number) {\n    this.newPost.media.splice(index, 1);\n  }\n\n  submitPost() {\n    if (!this.currentUser || !this.newPost.title || !this.newPost.content) return;\n\n    const tags = this.newPost.tagsString.split(',').map(tag => tag.trim()).filter(tag => tag);\n\n    const postData = {\n      title: this.newPost.title,\n      content: this.newPost.content,\n      tags: tags,\n      media: this.newPost.media,\n      authorId: this.currentUser.id,\n      status: 'pending'\n    };\n\n    this.dogService.submitCommunityPost(postData).subscribe((post: DogPost) => {\n      this.communityPosts.unshift(post);\n      this.filterByStatus(this.selectedStatus);\n\n      // Reset form\n      this.newPost = {\n        title: '',\n        content: '',\n        tagsString: '',\n        media: []\n      };\n      this.showCreatePost = false;\n\n      alert('Your post has been submitted for review!');\n    });\n  }\n\n  likePost(post: DogPost) {\n    if (!this.currentUser) return;\n\n    this.dogService.likePost(post.id, this.currentUser.id).subscribe((updatedPost: DogPost) => {\n      const index = this.filteredPosts.findIndex(p => p.id === post.id);\n      if (index !== -1) {\n        this.filteredPosts[index] = updatedPost;\n      }\n    });\n  }\n\n  sharePost(post: DogPost) {\n    if (!this.currentUser) return;\n\n    this.dogService.sharePost(post.id, this.currentUser.id).subscribe(() => {\n      post.shares++;\n      navigator.share?.({\n        title: post.title,\n        text: post.content,\n        url: window.location.origin + '/post/' + post.id\n      }).catch(() => {\n        // Fallback: copy to clipboard\n        navigator.clipboard.writeText(window.location.origin + '/post/' + post.id);\n        alert('Link copied to clipboard!');\n      });\n    });\n  }\n\n  addComment(postId: string) {\n    const content = this.newComments[postId];\n    if (!content || !content.trim() || !this.currentUser) return;\n\n    this.commentsService.addComment(postId, content, this.currentUser.id, this.currentUser.name, this.currentUser.avatar)\n      .subscribe(comment => {\n        if (!this.postComments[postId]) {\n          this.postComments[postId] = [];\n        }\n        this.postComments[postId].push(comment);\n        this.newComments[postId] = '';\n      });\n  }\n\n  addReply(parentCommentId: string, postId: string) {\n    const content = this.replyTexts[parentCommentId];\n    if (!content || !content.trim() || !this.currentUser) return;\n\n    this.commentsService.addReply(postId, content, parentCommentId, this.currentUser.id, this.currentUser.name, this.currentUser.avatar)\n      .subscribe(reply => {\n        // Reload comments to get updated hierarchy\n        this.loadPostComments(postId);\n        this.replyTexts[parentCommentId] = '';\n        this.replyingTo[parentCommentId] = false;\n      });\n  }\n\n  likeComment(comment: Comment) {\n    if (!this.currentUser) return;\n\n    this.commentsService.likeComment(comment.id).subscribe(updatedComment => {\n      Object.assign(comment, updatedComment);\n    });\n  }\n\n  trackVideoView(post: DogPost) {\n    this.dogService.trackVideoView(post.id).subscribe(() => {\n      post.videoViews = (post.videoViews || 0) + 1;\n    });\n  }\n\n  isPostLiked(post: DogPost): boolean {\n    return this.currentUser ? post.likedBy.includes(this.currentUser.id) : false;\n  }\n\n  isCommentLiked(comment: Comment): boolean {\n    return this.currentUser ? comment.likedBy.includes(this.currentUser.id) : false;\n  }\n\n  toggleReply(commentId: string) {\n    this.replyingTo[commentId] = !this.replyingTo[commentId];\n  }\n\n  getMediaIcon(type: string): string {\n    return type === 'video' ? 'üé•' : 'üì∑';\n  }\n}", "\n<div class=\"community-page\">\n  <div class=\"community-header\">\n    <h1>üêï Dog Community</h1>\n    <p>Share your dog stories, photos, and videos with fellow dog lovers!</p>\n  </div>\n\n  <!-- Create Post Section -->\n  <div class=\"create-post-section\" *ngIf=\"currentUser\">\n    <button class=\"create-post-btn\" (click)=\"showCreatePost = !showCreatePost\">\n      {{ showCreatePost ? '‚ùå Cancel' : '‚ú® Create New Post' }}\n    </button>\n\n    <div class=\"create-post-form\" *ngIf=\"showCreatePost\">\n      <h3>üìù Share with the Community</h3>\n      <form (ngSubmit)=\"submitPost()\">\n        <div class=\"form-group\">\n          <label for=\"title\">Title</label>\n          <input \n            type=\"text\" \n            id=\"title\" \n            [(ngModel)]=\"newPost.title\" \n            name=\"title\"\n            placeholder=\"Give your post a catchy title...\"\n            required>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"content\">Content</label>\n          <textarea \n            id=\"content\" \n            [(ngModel)]=\"newPost.content\" \n            name=\"content\"\n            placeholder=\"Share your story, tips, or ask questions...\"\n            rows=\"5\"\n            required></textarea>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"media\">Photos & Videos</label>\n          <input \n            type=\"file\" \n            id=\"media\"\n            (change)=\"onMediaSelect($event)\"\n            multiple\n            accept=\"image/*,video/*\"\n            class=\"media-input\">\n          \n          <div class=\"media-preview\" *ngIf=\"newPost.media.length > 0\">\n            <div *ngFor=\"let media of newPost.media; let i = index\" class=\"media-item\">\n              <img *ngIf=\"media.type === 'image'\" [src]=\"media.url\" [alt]=\"media.caption\">\n              <video *ngIf=\"media.type === 'video'\" [src]=\"media.url\" controls></video>\n              <button type=\"button\" class=\"remove-media\" (click)=\"removeMedia(i)\">‚ùå</button>\n              <span class=\"media-type\">{{ getMediaIcon(media.type) }}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"tags\">Tags (comma-separated)</label>\n          <input \n            type=\"text\" \n            id=\"tags\" \n            [(ngModel)]=\"newPost.tagsString\" \n            name=\"tags\"\n            placeholder=\"puppy, training, health, breed-specific...\">\n        </div>\n\n        <button type=\"submit\" class=\"submit-btn\" [disabled]=\"!newPost.title || !newPost.content\">\n          üöÄ Submit Post for Review\n        </button>\n      </form>\n    </div>\n  </div>\n\n  <!-- Login Prompt -->\n  <div class=\"login-prompt\" *ngIf=\"!currentUser\">\n    <h2>üîê Join Our Community</h2>\n    <p>Please log in to share your posts and connect with other dog lovers.</p>\n    <button class=\"login-btn\">Log In</button>\n  </div>\n\n  <!-- Filter Options -->\n  <div class=\"posts-filter\">\n    <button \n      *ngFor=\"let status of statusFilters\" \n      class=\"filter-btn\"\n      [class.active]=\"selectedStatus === status.value\"\n      (click)=\"filterByStatus(status.value)\">\n      {{ status.label }}\n    </button>\n  </div>\n\n  <!-- Community Posts -->\n  <div class=\"posts-grid\">\n    <article *ngFor=\"let post of filteredPosts\" class=\"post-card\">\n      <div class=\"post-status\" [class]=\"post.status\">\n        {{ post.status | titlecase }}\n      </div>\n      \n      <div class=\"post-header\">\n        <div class=\"author-info\">\n          <img [src]=\"post.author.avatar\" [alt]=\"post.author.name\" class=\"author-avatar\">\n          <div>\n            <h4><a [routerLink]=\"['/profile', post.author.id]\">{{ post.author.name }}</a></h4>\n            <time>{{ post.createdAt | date:'MMM d, h:mm a' }}</time>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"post-content\">\n        <h3><a [routerLink]=\"['/post', post.id]\">{{ post.title }}</a></h3>\n        <p>{{ post.content | slice:0:200 }}{{ post.content.length > 200 ? '...' : '' }}</p>\n        \n        <!-- Legacy single image support -->\n        <img *ngIf=\"post.image && post.media.length === 0\" \n             [src]=\"post.image\" \n             [alt]=\"post.title\" \n             class=\"post-image\">\n        \n        <!-- New media gallery -->\n        <div class=\"media-gallery\" *ngIf=\"post.media.length > 0\">\n          <div *ngFor=\"let media of post.media\" class=\"media-item\">\n            <img *ngIf=\"media.type === 'image'\" \n                 [src]=\"media.url\" \n                 [alt]=\"media.caption || post.title\" \n                 class=\"media-content\">\n            <video *ngIf=\"media.type === 'video'\" \n                   [src]=\"media.url\" \n                   controls \n                   class=\"media-content\"\n                   (play)=\"trackVideoView(post)\">\n            </video>\n            <div class=\"media-overlay\">\n              <span class=\"media-type-badge\">{{ getMediaIcon(media.type) }}</span>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"post-tags\">\n          <span *ngFor=\"let tag of post.tags\" class=\"tag\">\n            <a [routerLink]=\"['/hashtag', tag]\">#{{ tag }}</a>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"post-actions\">\n        <div class=\"action-stats\">\n          <button class=\"action-btn like-btn\" \n                  [class.liked]=\"isPostLiked(post)\"\n                  (click)=\"likePost(post)\">\n            {{ isPostLiked(post) ? '‚ù§Ô∏è' : 'ü§ç' }} {{ post.likes }}\n          </button>\n          \n          <span class=\"stat\">üí¨ {{ post.commentsCount || 0 }}</span>\n          <span class=\"stat\">üëÅÔ∏è {{ post.views || 0 }}</span>\n          <span class=\"stat\" *ngIf=\"post.videoViews\">üé• {{ post.videoViews }}</span>\n          \n          <button class=\"action-btn share-btn\" (click)=\"sharePost(post)\">\n            üîó {{ post.shares || 0 }}\n          </button>\n        </div>\n      </div>\n\n      <!-- Comments Section -->\n      <div class=\"comments-section\">\n        <h5>üí¨ Comments</h5>\n        \n        <!-- Add Comment -->\n        <div class=\"add-comment\" *ngIf=\"currentUser\">\n          <img [src]=\"currentUser.avatar\" [alt]=\"currentUser.name\" class=\"comment-avatar\">\n          <div class=\"comment-input-container\">\n            <textarea \n              [(ngModel)]=\"newComments[post.id]\"\n              placeholder=\"Write a comment...\"\n              class=\"comment-input\"\n              rows=\"2\"></textarea>\n            <button \n              class=\"post-comment-btn\"\n              (click)=\"addComment(post.id)\"\n              [disabled]=\"!newComments[post.id] || !newComments[post.id].trim()\">\n              Post\n            </button>\n          </div>\n        </div>\n\n        <!-- Comments List -->\n        <div class=\"comments-list\">\n          <div *ngFor=\"let comment of postComments[post.id]\" class=\"comment-thread\">\n            <!-- Level 0 Comment -->\n            <div class=\"comment\" [attr.data-level]=\"comment.level\">\n              <img [src]=\"comment.userAvatar || 'üë§'\" [alt]=\"comment.userName\" class=\"comment-avatar\">\n              <div class=\"comment-content\">\n                <div class=\"comment-header\">\n                  <span class=\"comment-author\">{{ comment.userName }}</span>\n                  <time class=\"comment-time\">{{ comment.date | date:'MMM d, h:mm a' }}</time>\n                </div>\n                <p class=\"comment-text\">{{ comment.content }}</p>\n                <div class=\"comment-actions\">\n                  <button class=\"like-btn\" \n                          [class.liked]=\"isCommentLiked(comment)\"\n                          (click)=\"likeComment(comment)\">\n                    {{ isCommentLiked(comment) ? '‚ù§Ô∏è' : 'ü§ç' }} {{ comment.likes }}\n                  </button>\n                  <button class=\"reply-btn\" \n                          *ngIf=\"comment.level < 2\"\n                          (click)=\"toggleReply(comment.id)\">\n                    üí¨ Reply\n                  </button>\n                </div>\n\n                <!-- Reply Form -->\n                <div class=\"reply-form\" *ngIf=\"replyingTo[comment.id] && currentUser\">\n                  <textarea \n                    [(ngModel)]=\"replyTexts[comment.id]\"\n                    placeholder=\"Write a reply...\"\n                    class=\"reply-input\"\n                    rows=\"2\"></textarea>\n                  <div class=\"reply-actions\">\n                    <button \n                      class=\"submit-reply-btn\"\n                      (click)=\"addReply(comment.id, post.id)\"\n                      [disabled]=\"!replyTexts[comment.id] || !replyTexts[comment.id].trim()\">\n                      Reply\n                    </button>\n                    <button class=\"cancel-reply-btn\" (click)=\"toggleReply(comment.id)\">\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Level 1 Replies -->\n            <div *ngFor=\"let reply of comment.replies\" class=\"comment reply-level-1\" [attr.data-level]=\"reply.level\">\n              <img [src]=\"reply.userAvatar || 'üë§'\" [alt]=\"reply.userName\" class=\"comment-avatar\">\n              <div class=\"comment-content\">\n                <div class=\"comment-header\">\n                  <span class=\"comment-author\">{{ reply.userName }}</span>\n                  <time class=\"comment-time\">{{ reply.date | date:'MMM d, h:mm a' }}</time>\n                </div>\n                <p class=\"comment-text\">{{ reply.content }}</p>\n                <div class=\"comment-actions\">\n                  <button class=\"like-btn\" \n                          [class.liked]=\"isCommentLiked(reply)\"\n                          (click)=\"likeComment(reply)\">\n                    {{ isCommentLiked(reply) ? '‚ù§Ô∏è' : 'ü§ç' }} {{ reply.likes }}\n                  </button>\n                  <button class=\"reply-btn\" \n                          *ngIf=\"reply.level < 2\"\n                          (click)=\"toggleReply(reply.id)\">\n                    üí¨ Reply\n                  </button>\n                </div>\n\n                <!-- Reply Form Level 1 -->\n                <div class=\"reply-form\" *ngIf=\"replyingTo[reply.id] && currentUser\">\n                  <textarea \n                    [(ngModel)]=\"replyTexts[reply.id]\"\n                    placeholder=\"Write a reply...\"\n                    class=\"reply-input\"\n                    rows=\"2\"></textarea>\n                  <div class=\"reply-actions\">\n                    <button \n                      class=\"submit-reply-btn\"\n                      (click)=\"addReply(reply.id, post.id)\"\n                      [disabled]=\"!replyTexts[reply.id] || !replyTexts[reply.id].trim()\">\n                      Reply\n                    </button>\n                    <button class=\"cancel-reply-btn\" (click)=\"toggleReply(reply.id)\">\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Level 2 Replies -->\n              <div *ngFor=\"let subReply of reply.replies\" class=\"comment reply-level-2\" [attr.data-level]=\"subReply.level\">\n                <img [src]=\"subReply.userAvatar || 'üë§'\" [alt]=\"subReply.userName\" class=\"comment-avatar\">\n                <div class=\"comment-content\">\n                  <div class=\"comment-header\">\n                    <span class=\"comment-author\">{{ subReply.userName }}</span>\n                    <time class=\"comment-time\">{{ subReply.date | date:'MMM d, h:mm a' }}</time>\n                  </div>\n                  <p class=\"comment-text\">{{ subReply.content }}</p>\n                  <div class=\"comment-actions\">\n                    <button class=\"like-btn\" \n                            [class.liked]=\"isCommentLiked(subReply)\"\n                            (click)=\"likeComment(subReply)\">\n                      {{ isCommentLiked(subReply) ? '‚ù§Ô∏è' : 'ü§ç' }} {{ subReply.likes }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"login-prompt\" *ngIf=\"!currentUser\">\n          <p>Please <a href=\"#\" class=\"login-link\">login</a> to add comments.</p>\n        </div>\n      </div>\n    </article>\n  </div>\n\n  <div class=\"no-posts\" *ngIf=\"filteredPosts.length === 0\">\n    <p>No posts found with the selected filter.</p>\n  </div>\n</div>\n", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { DogService } from '../../services/dog.service';\nimport { AuthService } from '../../services/auth.service';\nimport { DogPost } from '../../models/dog.model';\nimport { User } from '../../models/user.model';\n\n@Component({\n  selector: 'app-admin',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterLink],\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n  currentUser: User | null = null;\n  isAdmin: boolean = false;\n  activeTab: string = 'pending';\n\n  totalPosts: DogPost[] = [];\n  pendingPosts: DogPost[] = [];\n  approvedPosts: DogPost[] = [];\n  users: User[] = [];\n  totalUsers: number = 0;\n\n  showCreatePost: boolean = false;\n  newPost = {\n    title: '',\n    content: '',\n    tagsString: '',\n    image: ''\n  };\n\n  tabs = [\n    { id: 'pending', label: 'Pending Posts' },\n    { id: 'posts', label: 'All Posts' },\n    { id: 'users', label: 'Users' }\n  ];\n\n  constructor(\n    private dogService: DogService,\n    private authService: AuthService\n  ) { }\n\n  ngOnInit() {\n    this.authService.currentUser$.subscribe((user: User | null) => {\n      this.currentUser = user;\n      this.isAdmin = user?.role === 'admin' || false;\n\n      if (this.isAdmin) {\n        this.loadAdminData();\n      }\n    });\n  }\n\n  loadAdminData() {\n    this.dogService.getDogPosts().subscribe((posts: DogPost[]) => {\n      this.totalPosts = posts;\n      this.pendingPosts = posts.filter((p: DogPost) => p.status === 'pending');\n      this.approvedPosts = posts.filter((p: DogPost) => p.status === 'approved');\n    });\n\n    this.dogService.getAllUsers().subscribe((users: User[]) => {\n      this.users = users;\n      this.totalUsers = users.length;\n    });\n  }\n\n  setActiveTab(tabId: string) {\n    this.activeTab = tabId;\n  }\n\n  approvePost(postId: string) {\n    this.dogService.updatePostStatus(postId, 'approved').subscribe(() => {\n      this.loadAdminData();\n    });\n  }\n\n  rejectPost(postId: string) {\n    this.dogService.updatePostStatus(postId, 'rejected').subscribe(() => {\n      this.loadAdminData();\n    });\n  }\n\n  createNewPost() {\n    if (!this.newPost.title || !this.newPost.content) return;\n\n    const tags = this.newPost.tagsString.split(',').map(tag => tag.trim()).filter(tag => tag);\n\n    const postData = {\n      title: this.newPost.title,\n      content: this.newPost.content,\n      tags: tags,\n      image: this.newPost.image,\n      authorId: this.currentUser?.id || '',\n      status: 'approved'\n    };\n\n    this.dogService.createPost(postData).subscribe(() => {\n      this.loadAdminData();\n      this.showCreatePost = false;\n      this.newPost = { title: '', content: '', tagsString: '', image: '' };\n    });\n  }\n\n  editPost(post: DogPost) {\n    // Implement edit functionality\n    console.log('Edit post:', post);\n  }\n\n  deletePost(postId: string) {\n    if (confirm('Are you sure you want to delete this post?')) {\n      this.dogService.deletePost(postId).subscribe(() => {\n        this.loadAdminData();\n      });\n    }\n  }\n\n  toggleUserRole(user: User) {\n    const newRole = user.role === 'admin' ? 'user' : 'admin';\n    this.dogService.updateUserRole(user.id, newRole).subscribe(() => {\n      this.loadAdminData();\n    });\n  }\n}", "\n<div class=\"admin-page\" *ngIf=\"isAdmin; else notAuthorized\">\n  <div class=\"admin-header\">\n    <h1>Admin Dashboard</h1>\n    <p>Manage posts, users, and community content</p>\n  </div>\n\n  <!-- Stats Dashboard -->\n  <div class=\"stats-grid\">\n    <div class=\"stat-card\">\n      <h3>{{ pendingPosts.length }}</h3>\n      <p>Pending Posts</p>\n    </div>\n    <div class=\"stat-card\">\n      <h3>{{ approvedPosts.length }}</h3>\n      <p>Approved Posts</p>\n    </div>\n    <div class=\"stat-card\">\n      <h3>{{ totalUsers }}</h3>\n      <p>Total Users</p>\n    </div>\n    <div class=\"stat-card\">\n      <h3>{{ totalPosts.length }}</h3>\n      <p>Total Posts</p>\n    </div>\n  </div>\n\n  <!-- Tabs -->\n  <div class=\"admin-tabs\">\n    <button \n      *ngFor=\"let tab of tabs\" \n      class=\"tab-btn\"\n      [class.active]=\"activeTab === tab.id\"\n      (click)=\"setActiveTab(tab.id)\">\n      {{ tab.label }}\n      <span *ngIf=\"tab.id === 'pending'\" class=\"badge\">{{ pendingPosts.length }}</span>\n    </button>\n  </div>\n\n  <!-- Pending Posts -->\n  <div class=\"tab-content\" *ngIf=\"activeTab === 'pending'\">\n    <h2>Posts Pending Review</h2>\n    <div class=\"posts-grid\" *ngIf=\"pendingPosts.length > 0; else noPendingPosts\">\n      <div *ngFor=\"let post of pendingPosts\" class=\"admin-post-card\">\n        <div class=\"post-info\">\n          <div class=\"author-info\">\n            <img [src]=\"post.author.avatar\" [alt]=\"post.author.name\" class=\"author-avatar\">\n            <div>\n              <h4>{{ post.author.name }}</h4>\n              <time>{{ post.createdAt | date }}</time>\n            </div>\n          </div>\n          <h3>{{ post.title }}</h3>\n          <p>{{ post.content | slice:0:200 }}{{ post.content.length > 200 ? '...' : '' }}</p>\n          <div class=\"post-tags\">\n            <span *ngFor=\"let tag of post.tags\" class=\"tag\">#{{ tag }}</span>\n          </div>\n        </div>\n        <div class=\"post-actions\">\n          <button class=\"approve-btn\" (click)=\"approvePost(post.id)\">Approve</button>\n          <button class=\"reject-btn\" (click)=\"rejectPost(post.id)\">Reject</button>\n          <button class=\"view-btn\">\n            <a [routerLink]=\"['/post', post.id]\">View Full</a>\n          </button>\n        </div>\n      </div>\n    </div>\n    <ng-template #noPendingPosts>\n      <div class=\"no-content\">\n        <p>No posts pending review.</p>\n      </div>\n    </ng-template>\n  </div>\n\n  <!-- All Posts Management -->\n  <div class=\"tab-content\" *ngIf=\"activeTab === 'posts'\">\n    <div class=\"section-header\">\n      <h2>All Posts Management</h2>\n      <button class=\"add-btn\" (click)=\"showCreatePost = !showCreatePost\">\n        {{ showCreatePost ? 'Cancel' : 'Create New Post' }}\n      </button>\n    </div>\n\n    <!-- Create New Post Form -->\n    <div class=\"create-post-form\" *ngIf=\"showCreatePost\">\n      <h3>Create New Post</h3>\n      <form (ngSubmit)=\"createNewPost()\">\n        <div class=\"form-group\">\n          <label>Title</label>\n          <input type=\"text\" [(ngModel)]=\"newPost.title\" name=\"title\" required>\n        </div>\n        <div class=\"form-group\">\n          <label>Content</label>\n          <textarea [(ngModel)]=\"newPost.content\" name=\"content\" rows=\"5\" required></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Tags (comma-separated)</label>\n          <input type=\"text\" [(ngModel)]=\"newPost.tagsString\" name=\"tags\">\n        </div>\n        <div class=\"form-group\">\n          <label>Image URL</label>\n          <input type=\"url\" [(ngModel)]=\"newPost.image\" name=\"image\">\n        </div>\n        <div class=\"form-actions\">\n          <button type=\"submit\" class=\"submit-btn\">Create Post</button>\n        </div>\n      </form>\n    </div>\n\n    <!-- Posts List -->\n    <div class=\"posts-list\">\n      <div *ngFor=\"let post of totalPosts\" class=\"admin-post-item\">\n        <div class=\"post-summary\">\n          <h4>{{ post.title }}</h4>\n          <p>{{ post.author.name }} ‚Ä¢ {{ post.createdAt | date }}</p>\n          <span class=\"status-badge\" [class]=\"post.status\">{{ post.status }}</span>\n        </div>\n        <div class=\"post-actions\">\n          <button class=\"edit-btn\" (click)=\"editPost(post)\">Edit</button>\n          <button class=\"delete-btn\" (click)=\"deletePost(post.id)\">Delete</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Users Management -->\n  <div class=\"tab-content\" *ngIf=\"activeTab === 'users'\">\n    <h2>Users Management</h2>\n    <div class=\"users-grid\">\n      <div *ngFor=\"let user of users\" class=\"user-card\">\n        <img [src]=\"user.avatar\" [alt]=\"user.username\" class=\"user-avatar\">\n        <div class=\"user-info\">\n          <h4>{{ user.name }}</h4>\n          <p>&#64;{{ user.username }}</p>\n          <p>{{ user.email }}</p>\n          <span class=\"role-badge\" [class]=\"user.role\">{{ user.role }}</span>\n        </div>\n        <div class=\"user-actions\">\n          <button class=\"role-btn\" (click)=\"toggleUserRole(user)\">\n            {{ user.role === 'admin' ? 'Remove Admin' : 'Make Admin' }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #notAuthorized>\n  <div class=\"not-authorized\">\n    <h1>Access Denied</h1>\n    <p>You don't have permission to access this page.</p>\n    <a routerLink=\"/\">Return to Home</a>\n  </div>\n</ng-template>\n", "\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { DogService } from '../../services/dog.service';\nimport { DogBreed } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-breed-detail',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './breed-detail.component.html',\n  styleUrls: ['./breed-detail.component.css']\n})\nexport class BreedDetailComponent implements OnInit {\n  breed: DogBreed | null = null;\n  loading = true;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dogService: DogService\n  ) {}\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      const breedId = params['id'];\n      this.loadBreed(breedId);\n    });\n  }\n\n  loadBreed(id: string) {\n    this.dogService.getBreedById(id).subscribe(breed => {\n      this.breed = breed;\n      this.loading = false;\n    });\n  }\n}\n", "\n<div class=\"breed-detail\" *ngIf=\"!loading && breed\">\n  <div class=\"breed-header\">\n    <div class=\"breed-image-container\">\n      <img [src]=\"breed.image\" [alt]=\"breed.name\" class=\"breed-hero-image\">\n      <div class=\"breed-badge\">\n        <span class=\"size-badge\">{{ breed.size }}</span>\n      </div>\n    </div>\n    <div class=\"breed-info\">\n      <h1>{{ breed.name }} üêï</h1>\n      <p class=\"breed-origin\">üìç Origin: {{ breed.origin }}</p>\n      <p class=\"breed-description\">{{ breed.description }}</p>\n    </div>\n  </div>\n\n  <div class=\"breed-details\">\n    <div class=\"detail-section\">\n      <h3>üéØ Temperament</h3>\n      <div class=\"trait-tags\">\n        <span class=\"trait-tag\" *ngFor=\"let trait of breed.temperament\">{{ trait }}</span>\n      </div>\n    </div>\n\n    <div class=\"detail-section\">\n      <h3>‚ú® Key Traits</h3>\n      <div class=\"trait-tags\">\n        <span class=\"trait-tag secondary\" *ngFor=\"let trait of breed.traits\">{{ trait }}</span>\n      </div>\n    </div>\n\n    <div class=\"stats-grid\">\n      <div class=\"stat-card\">\n        <h4>üìè Size</h4>\n        <p>{{ breed.size }}</p>\n      </div>\n      <div class=\"stat-card\">\n        <h4>‚è∞ Life Span</h4>\n        <p>{{ breed.lifeSpan }}</p>\n      </div>\n      <div class=\"stat-card\">\n        <h4>‚ö° Energy Level</h4>\n        <div class=\"rating\">\n          <span *ngFor=\"let i of [1,2,3,4,5]\" \n                [class.active]=\"i <= breed.energyLevel\">‚≠ê</span>\n        </div>\n      </div>\n      <div class=\"stat-card\">\n        <h4>‚úÇÔ∏è Grooming Needs</h4>\n        <div class=\"rating\">\n          <span *ngFor=\"let i of [1,2,3,4,5]\" \n                [class.active]=\"i <= breed.groomingNeeds\">üîß</span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"back-section\">\n    <a routerLink=\"/all-breeds\" class=\"back-btn\">üîô Back to All Breeds</a>\n  </div>\n</div>\n\n<div class=\"loading\" *ngIf=\"loading\">\n  <p>üêï Loading breed details...</p>\n</div>\n\n<div class=\"not-found\" *ngIf=\"!loading && !breed\">\n  <h2>üö´ Breed Not Found</h2>\n  <p>Sorry, we couldn't find that breed.</p>\n  <a routerLink=\"/all-breeds\" class=\"back-btn\">üîô Back to All Breeds</a>\n</div>\n", "\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { DogService } from '../../services/dog.service';\nimport { DogBreed } from '../../models/dog.model';\n\n@Component({\n  selector: 'app-all-breeds',\n  standalone: true,\n  imports: [CommonModule, RouterLink, FormsModule],\n  templateUrl: './all-breeds.component.html',\n  styleUrls: ['./all-breeds.component.css']\n})\nexport class AllBreedsComponent implements OnInit {\n  breeds: DogBreed[] = [];\n  filteredBreeds: DogBreed[] = [];\n  searchQuery = '';\n  selectedSize = '';\n  loading = true;\n\n  constructor(private dogService: DogService) {}\n\n  ngOnInit() {\n    this.loadBreeds();\n  }\n\n  loadBreeds() {\n    this.dogService.getDogBreeds().subscribe(breeds => {\n      this.breeds = breeds;\n      this.filteredBreeds = breeds;\n      this.loading = false;\n    });\n  }\n\n  onSearch() {\n    this.filterBreeds();\n  }\n\n  onSizeFilter() {\n    this.filterBreeds();\n  }\n\n  filterBreeds() {\n    let filtered = this.breeds;\n\n    if (this.searchQuery.trim()) {\n      filtered = filtered.filter(breed =>\n        breed.name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\n        breed.description.toLowerCase().includes(this.searchQuery.toLowerCase())\n      );\n    }\n\n    if (this.selectedSize) {\n      filtered = filtered.filter(breed => breed.size === this.selectedSize);\n    }\n\n    this.filteredBreeds = filtered;\n  }\n\n  clearFilters() {\n    this.searchQuery = '';\n    this.selectedSize = '';\n    this.filteredBreeds = this.breeds;\n  }\n}\n", "\n<div class=\"all-breeds-page\">\n  <div class=\"page-header\">\n    <h1>üêï All Dog Breeds</h1>\n    <p>Discover amazing dog breeds with their unique characteristics</p>\n  </div>\n\n  <div class=\"filters-section\">\n    <div class=\"search-box\">\n      <input \n        type=\"text\" \n        [(ngModel)]=\"searchQuery\" \n        (input)=\"onSearch()\"\n        placeholder=\"üîç Search breeds...\"\n        class=\"search-input\">\n    </div>\n    \n    <div class=\"filter-controls\">\n      <select [(ngModel)]=\"selectedSize\" (change)=\"onSizeFilter()\" class=\"size-filter\">\n        <option value=\"\">üìè All Sizes</option>\n        <option value=\"Small\">üêï‚Äçü¶∫ Small</option>\n        <option value=\"Medium\">üêï Medium</option>\n        <option value=\"Large\">üêï‚Äçü¶Æ Large</option>\n      </select>\n      \n      <button (click)=\"clearFilters()\" class=\"clear-btn\">üóëÔ∏è Clear</button>\n    </div>\n  </div>\n\n  <div class=\"breeds-grid\" *ngIf=\"!loading\">\n    <div class=\"breed-card\" *ngFor=\"let breed of filteredBreeds\" [routerLink]=\"['/breed', breed.id]\">\n      <div class=\"breed-avatar\">\n        <img [src]=\"breed.image\" [alt]=\"breed.name\" class=\"breed-image\">\n        <div class=\"size-indicator\">{{ breed.size.charAt(0) }}</div>\n      </div>\n      <div class=\"breed-info\">\n        <h3>{{ breed.name }}</h3>\n        <p class=\"breed-origin\">üìç {{ breed.origin }}</p>\n        <div class=\"breed-stats\">\n          <span class=\"stat\">‚ö° {{ breed.energyLevel }}/5</span>\n          <span class=\"stat\">‚úÇÔ∏è {{ breed.groomingNeeds }}/5</span>\n        </div>\n        <div class=\"breed-traits\">\n          <span class=\"trait\" *ngFor=\"let trait of breed.temperament.slice(0, 2)\">{{ trait }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"loading\" *ngIf=\"loading\">\n    <p>üêï Loading amazing breeds...</p>\n  </div>\n\n  <div class=\"no-results\" *ngIf=\"!loading && filteredBreeds.length === 0\">\n    <h3>üö´ No breeds found</h3>\n    <p>Try adjusting your search or filters</p>\n    <button (click)=\"clearFilters()\" class=\"clear-btn\">üîÑ Show All Breeds</button>\n  </div>\n</div>\n", "import { Routes } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { CategoryPageComponent } from './components/category-page/category-page.component';\nimport { SearchPageComponent } from './components/search-page/search-page.component';\nimport { HashtagPageComponent } from './components/hashtag-page/hashtag-page.component';\nimport { PostDetailComponent } from './components/post-detail/post-detail.component';\nimport { CommunityComponent } from './components/community/community.component';\nimport { AdminComponent } from './components/admin/admin.component';\nimport { BreedDetailComponent } from './components/breed-detail/breed-detail.component';\nimport { AllBreedsComponent } from './components/all-breeds/all-breeds.component';\n\nexport const routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'category/:category', component: CategoryPageComponent },\n  { path: 'search', component: SearchPageComponent },\n  { path: 'hashtag/:tag', component: HashtagPageComponent },\n  { path: 'post/:id', component: PostDetailComponent },\n  { path: 'community', component: CommunityComponent },\n  { path: 'admin', component: AdminComponent },\n  { path: 'breed/:id', component: BreedDetailComponent },\n  { path: 'all-breeds', component: AllBreedsComponent },\n  { path: 'profile/:id', loadComponent: () => import('./components/user-profile/user-profile.component').then(m => m.UserProfileComponent) },\n  { path: '**', redirectTo: '' }\n];", "import { ApplicationConfig } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withFetch } from '@angular/common/http';\n\nimport { routes } from './app.routes';\nimport { provideClientHydration } from '@angular/platform-browser';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes), \n    provideClientHydration(),\n    provideHttpClient(withFetch())\n  ]\n};\n", "import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';\nimport { provideServerRendering } from '@angular/platform-server';\nimport { appConfig } from './app.config';\n\nconst serverConfig: ApplicationConfig = {\n  providers: [\n    provideServerRendering()\n  ]\n};\n\nexport const config = mergeApplicationConfig(appConfig, serverConfig);\n", "import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { config } from './app/app.config.server';\n\nconst bootstrap = () => bootstrapApplication(AppComponent, config);\n\nexport default bootstrap;\n"],
  "mappings": "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",
  "names": ["_c0", "_c0", "_c0", "_c1", "config", "_c0", "_c1", "_c0", "_c1", "_c0", "_c0", "_c1", "_c0", "_c0", "_c0"]
}
